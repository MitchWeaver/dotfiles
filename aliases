#!/bin/loksh
#
# http://github.com/mitchweaver/dots
#
# this needs organized so bad, possibly split into multiple files
#
# it's a mess, you've been warned...
# 
# * CLEANUP IN PROGRESS *
#
# # # # # # # # # # # # # # # # # # #

# ------------------------ init -------------------------------
# fix shell env variable if its broken
export SHELL=${SHELL:-$0}

# don't break things if we aren't using a compliant shell
case ${SHELL} in
    *ksh|*ash) true ;;
    *) return
esac

# lifehack
alias a=alias

# check if we have installed
has() {
    for _h ; do
        type $_h || return 1
    done > /dev/null 2>&1
}

# check if file/folder exists
exists() {
    for _e ; do
        [ -e $_e ] || return 1
    done
}

# unaliaser
u() {
    for _u ; do 
        unalias $_u || unset -f $_u
    done 2> /dev/null
}

# nobody uses these...
u r w

py() {
    for py_ver in 3.7 3.6 3.5 3.4 3 2.7 2.5 2 ; do
        type python$py_ver >/dev/null && break
    done
    python$py_ver
}
# --------------------- end init ----------------------------------

# --------------------- OS specific aliases ------------------------
case $(uname) in
    Linux) export NPROC="$(nproc)"
           a disks='lsblk'
           a webcam='ffmpeg -i /dev/video0 -f alsa -i default "$(date)".mp4'
           ;;
    OpenBSD) export NPROC=$(sysctl -n hw.ncpu)
             a sudo=doas
             a seq=jot
             a disks='sysctl -n hw.disknames'
             a disklabel='doas disklabel -h'
             a killall='pkill -9'
             a poweroff='doas shutdown -p now'
             a webcam='ffmpeg -i /dev/video0 -f sndio -i default "$(date)".mp4'
esac
# ---------------- end OS specific aliases -------------------------

# dynamic 'c' utility
c() {
    if [ $# -eq 0 ] ; then
        clear
    elif [ -d "$1" ] ; then
        cd "$1"
    elif [ -f "$1" ] ; then
        cat "$1"
    fi
}

# ls stuff
if has exa ; then
    a ls='exa -F'
elif has colorls ; then
    a ls='colorls -F'
else
    a ls='ls -F'
fi

# better clear function, but doesn't work in dvtm
if ! pgrep -x dvtm > /dev/null ; then
    a clear='printf "\033c"'
fi

# generic aliases
a cmd=command
a {cc,cll,clear,clar,clea,clera}=clear
a {x,xx,xxx,q,qq,qqq,:q,:Q,:wq,:w,exi}=exit
a {l,sls,sl}=ls
a ll='l -l'
a la='l -a'
a lt='cmd ls -halt'
a {lla,lal}='l -al'
a lsf='l "$PWD"/*'
a {cls,csl,cl,lc}='c;l'
a {e,ech,eho}=echo
a {g,gr,gre,Grep,gerp}=grep
a {pg,pgrep}='pgrep -f'
a pkill='pkill -f'
a dg='du | g -i'
a lg='ls | g -i'
a cp='cp -irv'
a mv='mv -iv'
a {mkdir,mkd,mkdr}='mkdir -p'
a df='df -h'
a ag='a | g -i'
a bn=basename
a date="cmd date '+%a %b %d - %I:%M %p'"
a dmegs=dmesg
a h='head -n 15'
a t='tail -n 15'
a {w,watch}='watch -t -n 1'
a ex=export
a cx='chmod +x'
a poweroff='sudo poweroff'
a {reboot,restart}='sudo reboot'
a chroot='sudo chroot'
a su='su -'

# gnu make
a {make,mak}="make -j$(( $NPROC + 1 ))"
a {makec,makc}='make clean'
a {makei,maki}='make install'
a {makeu,maku}='make uninstall'
a {makea,maeka,maka}='makec;make;makei'
a makeac='makea;c'

# plan9 make
a mkc='mk clean'
a mki='mk install'
a mku='mk uninstall'
a mka='mkc;mk;mki'

# common program aliases
a diff='diff -u'
a {less,les}='less -QRd'
a view='${EDITOR} -R'
a rsync='rsync -rtvuh4 --progress --delete' #-c
a sshd='sudo /usr/sbin/sshd'
a scp='scp -rp4'
a {htpo,hto,ht,hpot,hotp,top}='htop'
a {hm,hme}='htop -u ${USER}'
a {hr,hroot}='htop -u root'
a nf=neofetch
a rtv='rtv --enable-media ; c'
a compton='pkill compton ; compton & c'
a feh='feh -q -N -x -X -s -Z --scale-down --title feh'
a click='xdotool click 1'

# weather
a weather='curl -s wttr.in/madison,sd?m0TQ'
a forecast='curl -s http://wttr.in/madison,sd?m | \
   tail -n 33 | sed $\ d | sed $\ d'

# random printing
a heart='printf "%b\n" "\xe2\x9d\xa4"'

# hash stuff
md5=md5sum
sha1=sha1sum
sha256=sha256sum
sha512=sha512sum

ps() {
    if [ $# -gt 0 ] ; then
        cmd ps auwwx | g -i "$@" | g -v grep
    else
        cmd ps auwwx
    fi | head -n 20
}

mkcd() { mkd "$_" && cd "$_" ; }
mvcd() { mv "$1" "$2" && cd "$2" ; }
cpcd() { cp "$1" "$2" && cd "$2" ; }

du() { 
    [ $# -eq 0 ] && set .
    cmd du -ahLd 1 "$1" | sort -rh | head -n 20
} 2> /dev/null

# files
f() { 
    case $# in
        1) set . "$@" ;;
        0) read inp && set . "$inp"
    esac

    find "$1" ! -path "$1" -iname "*$2*" ; 
}

# Hack!
echossh() {
    if [ $# -lt 3 ] ; then
        >&2 echo 'usage: echossh user@host file $@'
        return 1
    else
        local user_at_host="$1"
        local file="$2"
        shift 2
        echo "$@" | ssh "$user_at_host" \
            sh -c "cat /dev/stdin >> $file"
    fi
}

# if ps1 gets bugged out
ps1() { export PS1='% ' ; }

# search history for command: "history grep", no its not mercurial.
hg() {
    if [ $# -gt 0 ] ; then
        g -e "$@" $HISTFILE | grep -v '^hg' | head -n 20
    fi
}

ext() { e "${1##*.}" ; }
filename() { e "${1%.*}" ; }
cheat() { curl -s cheat.sh/$1 ; }
rgb2hex() { printf "#%02x%02x%02x\n" "$@" ; }

reload() {
    . ~/etc/aliases
    . ~/etc/fff.conf
    xrdb load ~/etc/Xresources
    xmodmap ~/etc/Xmodmap
    xset m 0 0 
    xset b off 
    xset +fp /home/mitch/.fonts
    xset fp rehash
    fc-cache
} > /dev/null 2>&1

ping() {
    if [ $# -eq 0 ] ; then
        online && echo Online!
    else
        /bin/ping "$@"
    fi
}

w3m() {
    [ $# -eq 0 ] && set https://ddg.gg/lite
    cmd w3m -F "$@"
}

v() { 
    # if no arguments, open my vimwiki page
    if [ $# -eq 0 ] ; then
        if exists ${HOME}/var/files/vimwiki && [ $EDITOR = nvim ] ; then
            set -- -c VimwikiIndex
        fi
        $EDITOR "$@"
        return
    fi

    # fuzzy-find file / recurse down
    if [ -f "$1" ] ; then
        $EDITOR "$1"
    else
        for i in 1 2 3 4 5 ; do
            local f="$(find . -iname *"$@"* -maxdepth $i | head -n 1)"
            if [ -f "$f" ] ; then
                $EDITOR "$f"
                return
            fi
        done
        $EDITOR "$@"
    fi 2> /dev/null
}
a {V,vim}=v

fff() {
    cmd fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

r() { ranger "$@" ; c ; }
# a r=fff

mpv() { 
    [ $# -eq 0 ] && return 1

    # kill any currently running mpv before launching a new
    if pgrep xwinwrap > /dev/null ; then
        # kill all mpv except the one with the mpvbg pid
        # as not to kill our desktop background! see ~/bin/mpv/mpvbg for details
        kill $(pgrep -a mpv | grep -v mpvbg | awk '{print $1}')
    else
        pkill mpv
    fi > /dev/null 2>&1

    cmd mpv --title=mpv "$@"
}
mpvm() { mpv --no-video "$@" ; }

# youtube-dl
ytdlm() { 
    for i ; do
        youtube-dl --geo-bypass --prefer-ffmpeg --extract-audio \
            --audio-quality 0 --audio-format opus "$i"
    done
}
ytdl() { 
    for i ; do
        youtube-dl --geo-bypass --prefer-ffmpeg "$i"
    done
}

# imagemagick
75%() { mogrify -resize '75%X75%' "$@" ; }
50%() { mogrify -resize '50%X50%' "$@" ; }
25%() { mogrify -resize '25%X25%' "$@" ; }

# translate-shell
trans() {
    [ $# -eq 0 ] && read inp && set "$inp"
    cmd trans -no-auto -b "$@"
}
rtrans() {
    [ $# -eq 0 ] && read inp && set "$inp"
    # note: $1 needs to be language code, ex: 'de'
    cmd trans -from en -to "$@"
}
rde() {
    [ $# -eq 0 ] && read inp && set "$inp"
    rtrans de "$*"
}

# ----------------- movement commands -----------------------
a {..,cd..}='cd ..'
a ...='.. ; ..'
a ....='.. ; ...'

# directory marking
# usage: 'm1' = mark 1
#        'g1' = return to m1
for i in 1 2 3 4 5 6 7 8 9 ; do
    eval "m${i}() { export _MARK${i}=\$PWD ; }"
    eval "g${i}() { cd \$_MARK${i} ; }"
done

_g() { local a=$1 ; shift ; cd $a/"$@" ; cl ;  }

for i in bin env etc tmp usr var src ; do
    if exists ~/$i ; then
        a g$(printf %.1s $i)="_g ~/$i"
    fi
    a g$(printf %.1s $i | tr '[a-z]' '[A-Z]')="_g /$i"
done

a gM='_g /mnt'

case ${SHELL} in
    *ksh|bash)
        g~() { cd ~          ; }
        m~() { mv "$@" ~     ; }
        Y~() { cp "$@" ~     ; }
esac

mT() { mv "$@" /tmp  ; }
YT() { cp "$@" /tmp  ; }

if exists ~/var ; then
    for i in downloads files images music ; do
        a g$(printf %.1s $i)="_g ~/var/$i"
    done

    a {gvi,gvid}='_g ~/var/videos'
    a gbk='_g ~/var/books'
    a gvt='_g ~/var/tmp'
    a gyt='_g ~/.youtube-dl'

    Yf() { cp "$@" ~/var/files     ; }
    Yd() { cp "$@" ~/var/downloads ; }
    Yi() { cp "$@" ~/var/images    ; }
    Ym() { cp "$@" ~/var/music     ; }
    Yvi(){ cp "$@" ~/var/videos    ; }

    mf() { mv "$@" ~/var/files     ; }
    md() { mv "$@" ~/var/downloads ; }
    mi() { mv "$@" ~/var/images    ; }
    mm() { mv "$@" ~/var/music     ; }
    mvi(){ mv "$@" ~/var/videos    ; }
fi

if exists ~/usr ; then
    a gr='_g ~/usr/repos' 
    a gbkup='_g ~/usr/backup'
    mu() { mv "$@" ~/usr ; }
    mr() { mv "$@" ~/usr/repos ; }
    Yu() { cp "$@" ~/usr ; }
    Yr() { cp "$@" ~/usr/repos ; }
fi

if exists ~/etc ; then
    me() { mv "$@" ~/etc ; }
    Ye() { cp "$@" ~/etc ; }
    a gcf='_g ~/etc/config'

    a {aliases,alaises,aliase}='v ~/etc/aliases'
    a profile='v ~/etc/profile'
    a {bkm,bmk}='r ~/var/files/bkm'
    a {vssh,sshv}='v ~/.ssh/config'

    a vimrc="v ~/etc/vimrc"
    a kshrc="v ~/etc/kshrc"
fi

if exists ~/src ; then
    a gs='_g ~/src'
    ms() { mv "$@" ~/src ; }
    Ys() { cp "$@" ~/src ; }
fi

if exists ~/bin ; then
    mb() { mv "$@" ~/bin ; }
    Yb() { cp "$@" ~/bin ; }
fi

if exists ~/tmp ; then
    mt() { mv "$@" ~/tmp ; }
    Yt() { cp "$@" ~/tmp ; }
fi

if exists ~/env ; then
    mn() { mv "$@" ~/env ; }
    Yn() { cp "$@" ~/env ; }
    a gn='_g ~/env'
fi

m_() { mv "$@" ~/.trash ; }
Y_() { cp "$@" ~/.trash ; }
a g_='_g ~/.trash'
a trash=m_

# ----------- end movement commands ------------------

a save_unsplash_wall="cp ${HOME}/var/tmp/wall ${HOME}/var/images/wallpapers/unsplash/saved_\"$(date)\".png"
save_wall() { cp -f "$1" ${HOME}/var/tmp/wall ; }

# skeletons
helloc() {
cat > hello.c << EOF
#include <stdio.h>
int main() { printf("%s\n", "hi"); return 0; }
EOF
}
hellosh() {
cat > hello.sh << EOF
#!/bin/sh
main() { printf "%s\n" "hi" ; }
main "$@"
EOF
chmod +x hello.sh
}

# unalias loop/tmp variables
u i j _u _p _h

gud() {
    # activate my PS1 git branch detection after
    # git commands
    cmd gud "$@" ; cd .
}

a {repomc,reocmp,reomcp,recopm,recmop,recpom}=recomp

a bonsai="cd ~/src/bonsai-master ; ./bonsai"
a {b,bs,bpm}=bonsai
a mkwebsite='cd ~/src/bonsai-website ; mk site'
a mkpkgs='cd ~/src/bonsai-website ; mk pkgs'
a mkbkup='cd ~/src/bonsai-website ; mk bkup'
