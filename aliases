# http://github.com/mitchweaver/dots

export SHELL=${SHELL:-$0}

case ${SHELL} in
    *ksh|*ash) true ;;
    *) return # don't break things
esac

u() { for _u ; do 
        unalias $_u || unset -f $_u
      done 2> /dev/null ; }

u r w # nobody uses these...

alias a=alias

has() { for _h ; do
            type $_h || return 1
        done > /dev/null 2>&1 ; }

exists() { for _e ; do
               [ -e $_e ] || return 1
           done ; }

contains() {
    [ $# -ne 2 ] && return 1
    local string="$1"
    local substring="$2"
    if test "${string#*$substring}" != "$string" ; then
        return 0    # $substring is in $string
    else
        return 1    # $substring is not in $string
    fi
}

if has exa ; then
    a ls='exa -F'
elif has colorls ; then
    a ls='colorls -F'
else
    case $(uname) in
        Linux) a ls='ls -F --color=always' ;;
        *BSD)  a ls='ls -F'
    esac
fi

case $(uname) in
    Linux) export NPROC="$(nproc)"
           a free='free -h'
           a disks='lsblk'
           a webcam='ffmpeg -i /dev/video0 -f alsa -i default "$(date)".mp4'
           if has crux ; then
               prt='prt-get -im -is -if --install-scripts'
               pkg() { case "$1" in
                           add)    shift ; sudo $prt depinst $@ -f ;;
                           update) shift ; if prt-get isinst $@ > /dev/null ; then sudo $prt update $@  ; fi ;;
                           del)    shift ; sudo $prt remove $@     ;;
                           # sysup)  shift ; sudo $prt sysup -f $@   ;;
                           deps)   shift ; prt-get deps $@         ;;
                           list)   shift ; pkginfo -i $@           ;;
                           search) shift ; prt-get search $@       ;;
                           info)   shift ; prt-get info $@         ;;
                           list)   prt-get listinst ;;
                           *) >&2 echo \?
                       esac ; }
          elif has emerge ; then
              emerge='emerge -aq --newuse --changed-use'
              pkg() { case "$1" in
                          add)    shift ; sudo $emerge $@            ;;
                          update) shift ; sudo $emerge -u $@         ;;
                          del)    shift ; sudo emerge --unmerge $@   ;;
                          list)   shift ; cat /var/tmp/portage/world ;;
                          search) shift ; emerge --search $@         ;;
                          sync)   shift ; emerge --sync $@           ;;
                          info)   shift ; emerge --info $@           ;;
                          *) >&2 echo \?
                      esac ; }
         elif has setup-alpine ; then
              a pkg=apk
         elif has apt ; then
             pkg() { case "$1" in
                         add)    shift ; apt install $@ ;;
                         del)    shift ; apt remove $@  ;;
                         sync)   shift ; apt update     ;;
                         update) shift ; apt upgrade    ;;
                         *) >&2 echo \?
                     esac ; }
         fi
;;
    OpenBSD) export NPROC=$(sysctl -n hw.ncpu)
             a sudo=doas
             a seq=jot
             a rm='rm -P'
             a disks='sysctl -n hw.disknames'
             a disklabel='doas disklabel -h'
             a sg='sysctl | grep ji'
             a killall='pkill -9'
             a poweroff='doas shutdown -p now'
             a webcam='ffmpeg -i /dev/video0 -f sndio -i default "$(date)".mp4'
             pkg_del() { for i in $* quirks -a ; do 
                             doas pkg_delete $i 
                         done ; }
             pkg() { case "$1" in
                         add)    shift ; doas pkg_add -D snap $* ;;
                         del)    shift ; pkg_del $*              ;;
                         info)   shift ; pkg_info -D snap $*     ;;
                         search) shift ; pkg_info -D snap -Q $*  ;;
                         *) >&2 echo \?
                     esac ; }
esac

pgrep -x dvtm > /dev/null ||
    a clear='printf "\033c"'

c() {
    if [ $# -eq 0 ] ; then
        clear
    elif [ -d "$1" ] ; then
        cd "$1"
    elif [ -f "$1" ] ; then
        cat "$1"
    fi
}

a {cc,cll,clear,clar,clea}=clear
a {x,xx,xxx,q,qq,qqq,:q,:Q,:wq,:w,exi}=exit
a {l,sls,sl}=ls
a ll='l -l'
a la='l -a'
a lt='cmd ls -halt'
a {lla,lal}='l -al'
a lsf='l "$PWD"/*'
a {cls,csl,cl,lc}='c;l'
a {e,ech,eho}=echo
a err='>&2 e'
a {g,Grep,gerp}=grep
a {pg,pgrep}='pgrep -f'
a pkill='pkill -f'
a dg='du | g -i'
a lg='ls | g -i'
a cp='cp -irv'
a mv='mv -iv'
a {mkdir,mkd,mkdr}='mkdir -p'
a df='df -h'
a ln='ln -sf'
a ag='a | g -i'
a tf='typeset -f'
a file='file -b -i -L'
a bn=basename
a {d,date}="cmd date '+%a %b %d - %I:%M %p'"
a dmegs=dmesg
a man='man -a'
a h='head -n 15'
a t='tail -n 15'
a {w,watch}='watch -t -n 1'
a ex=export
a cmd=command
a cx='chmod +x'
a chown='chown -R'
a poweroff='sudo poweroff'
a {reboot,restart}='sudo reboot'
a {mk,mkae}="make -j$(( $NPROC + 1 ))"
a mkc='mk clean'
a mki='mk install'
a mku='mk uninstall'
a mkall="mkc ; mk && mki"
a {xs,xc}='xsel -o ; e'
a rsync='rsync -rtvuh4 --progress --delete' #-c
a sshd='sudo /usr/sbin/sshd'
a scp='scp -rp4'
a {wtf,wtfismyip}='w3m -dump https://wtfismyip.com'
a diff='git diff'
a {less,les}='less -QRd'
a {notepad,vtmp}='v /tmp/notepad'
a {suvim,suvi,suv}='sudo ${EDITOR}'
a view='${EDITOR} -R'
a {htpo,hto,ht,hpot,hotp,top}='htop'
a {hm,hme}='htop -u ${USER}'
a {hr,hroot}='htop -u root'
a nf=neofetch
a {rtv,reddit}="rtv --enable-media ; c"
a compton='pkill -9 compton ; compton & c'
a feh='feh -q -N -x -X -s -Z --scale-down --title feh'
a weather='curl -s wttr.in/madison,sd?m0TQ'
a forecast='curl -s http://wttr.in/madison,sd?m | \
   tail -n 33 | sed $\ d | sed $\ d'
a heart='printf "%b\n" "\xe2\x9d\xa4"'
a chroot='sudo chroot'
a x720='xrandr -s 1280x720 ; bar'
a x1080='xrandr -s 1920x1080 ; bar'
a click='xdotool click 1'
a su='su -'

for i in 3.6 3.5 3.4 3 ; do
    type python$i > /dev/null 2>&1 &&
        { a py3=python$i ; break ; }
done

for i in 2.7 2.5 2 ; do
    type python$i > /dev/null 2>&1 &&
        { a py2=python$i ; break ; }
done

has py3 && a py=py3 || a py=py2

ps() {
    if [ $# -gt 0 ] ; then
        cmd ps auwwx | g -i "$@" | g -v grep
    else
        cmd ps auwwx
    fi | head -n 20
}

mkcd() { mkd "$_" && cd "$_" ; }
mvcd() { mv "$1" "$2" && cd "$2" ; }
cpcd() { cp "$1" "$2" && cd "$2" ; }

du() { 
    [ $# -eq 0 ] && set .
    # gnu
    { command du -ahL --max-depth=1 "$1" | sort -rh ; } ||
    # busybox / BSD
    { command du -ahLd 1 "$1" | sort -r ; } |
    head -n 20
} 2> /dev/null

# directory marking
# usage: 'm1' = mark 1
#        'g1' = return to m1
for i in 1 2 3 4 5 6 7 8 9 ; do
    eval "m${i}() { export _MARK${i}=\$PWD ; }"
    eval "g${i}() { cd \$_MARK${i} ; }"
done

run() { 
    [ $# -lt 2 ] && exit 1
    local c=$1 ; shift
    for i in $(seq $c) ; do 
        "$@"
    done 
}

# files
f() { 
    case $# in
        1) set . "$@" ;;
        0) read inp && set . "$inp"
    esac

    find "$1" ! -path "$1" -iname "*$2*" ; 
}

# folders
ff() { 
    case $# in
        1) set . "$@" ;;
        0) read inp && set . "$inp"
    esac

    find "$1" ! -path "$1" -type d -iname "*$2*" ; 
}

fdo() {
    case $# in
        2) set . "$@" ;;
        0) read inp && set . "$inp"
    esac

    local dir="$1"
    local string="$2"
    shift 2
    
    if contains "$@" '{}' ; then
        local cmd="$@"
    else
        local cmd="$@ {}"
    fi

    find "$dir" ! -path "$dir" -iname "*$string*" -exec $cmd \; 
}

echossh() {
    if [ $# -lt 3 ] ; then
        >&2 echo 'usage: echossh user@host file $@'
        exit 1
    else
        local user_at_host="$1"
        local file="$2"
        shift 2
        echo "$@" | ssh "$user_at_host" \
            sh -c "cat /dev/stdin >> $file"
    fi
}

ps1() { export PS1='% ' ; }

dlzip() { wget "$@" -O dl.zip && unzip dl.zip && rm -f dl.zip && cls ; }

hg() { [ $# -gt 0 ] && g -e "$@" $HISTFILE | head -n 20 ; }

ext() { e "${1##*.}" ; }
filename() { e "${1%.*}" ; }
cheat() { curl -s cheat.sh/$1 ; }
rgb2hex() { printf "#%02x%02x%02x\n" "$@" ; }

reload() { . ~/etc/aliases
           xrdb load ~/etc/Xresources
           xmodmap ~/etc/Xmodmap
           xset m 0 0 
           xset b off 
           xset +fp /home/mitch/.fonts
           xset fp rehash
           fc-cache ; } 2> /dev/null

ping() { [ $# -eq 0 ] && set google.com
         /bin/ping $1 ; }
         # -c 1 -n -s 16 -w 10 $1 | head -n 2 ; }

has nasm &&
    nasm() { [ -f "$1" ] &&
                cmd nasm -f elf32 -g -F dwarf "$1" &&
                    ld -m elf_i386 "${1%.*}.o" -o "${1%.*}" &&
                        ./"${1%.*}" ; }

has w3m && 
    w3m() { [ $# -eq 0 ] && set https://ddg.gg/lite ; cmd w3m -F $* ; }

exists ~/bin/bar &&
    bar() { pkill -9 -f bar ; ~/bin/bar & } > /dev/null

exists ~/bin/conv &&
    getconvs() {
        for i in dec bin hex oct ; do
            for j in dec bin hex oct ; do
                [ $i != $j ] &&
                    a ${i}2${j}="dash ~/bin/conv \
                        -i $(printf %.1s $i) \
                        -o $(echo -n ${j%??} | sed 's/.*2//')"
            done
        done
    }

has busybox && {
    has vi || a vi='busybox vi'
    a ash='busybox ash'
}

v() { 
    # if no arguments, open my vimwiki page
    if [ $# -eq 0 ] ; then
        if [ -d ${HOME}/var/files/vimwiki ] ; then
            { has nvim || has vim ; } &&
                set -- -c VimwikiIndex
                ${EDITOR} "$@"
                return
        else
            return
        fi
    fi

    for i in nvim vim vis vi nano ; do
        has $i &&
            { local editor=$i ; break ; }
    done

    if [ -f *"$@"* ] ; then
       $editor *"$@"*
    else
        local f="$(find . -iname *"$@"* -maxdepth 1 | head -n 1)"
        if [ -f "$f" ] ; then
            $editor "$f"
        else
            local f="$(find . -iname *"$@"* -maxdepth 2 | head -n 1)"
            if [ -f "$f" ] ; then
                $editor "$f"
            else
                $editor "$@"
            fi
        fi
    fi
} 2> /dev/null

has ranger &&
    r() { ranger "$@" ; c ; }

has pv &&
    a pv='pv -pcre'

has mpv &&
    mpv() { 
        [ $# -eq 0 ] && return 1
        if [ "$(pgrep xwinwrap)" ] ; then
            kill $(pgrep mpv | grep -v $(pgep -P \
                $(cat ${HOME}/.cache/mpvbg.pid))) \
                    > /dev/null 2>&1
        else
            pkill -9 mpv
        fi
        cmd mpv --title=mpv "$@"
    }
    mpvm() { mpv --no-video "$@" ; }

has mogrify &&
{
    a import='import -quiet -silent -window root -quality 100 ~/import.png'
    jpg() {
        [ -z "$@" ] && return
        # convert "$@" "$(filename "$@")".jpg &&
            # if [ "$(ext "$@")" != "jpg" ] ; then
                # rm -f "$@"
            # fi
        jpegoptim *.jpg
    }
    75%() { mogrify -resize '75%X75%' "$@" ; jpg "$@" ; }
    50%() { mogrify -resize '50%X50%' "$@" ; jpg "$@" ; }
    25%() { mogrify -resize '25%X25%' "$@" ; jpg "$@" ; }
}

has trans &&
{
    trans() {
        [ $# -eq 0 ] && read inp && set "$inp"
        cmd trans -no-auto -b "$@"
    }
    rtrans() {
        [ $# -eq 0 ] && read inp && set "$inp"
        # note: $1 needs to be language code, ex: 'de'
        cmd trans -from en -to "$@"
    }
    rde() {
        [ $# -eq 0 ] && read inp && set "$inp"
        rtrans de "$*"
    }
}

has git &&
{
    for i in init log fetch pull \
             branch clone help \
             stash blame clean ; do
        a g${i}="git $i"
    done
    a gmote='git remote add origin'
    a gstat='git status'
    a gbort='git rebase --abort'
    a gcherry='git cherry-pick'
    a gsub='git submodule'
    a {gcheck,checkout}='git checkout'
    gup() { 
        git add -A &&
        git commit -m "$@" &&
        git push -u origin $(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
    }
    gmit() { 
        if [ $# -eq 1 ] ; then
            git add -A &&
            git commit -m "$@"
        elif [ $# -gt 1 ] ; then
            git add "$1" &&
            shift &&
            git commit -m "$@"
        fi
    }
    gout() { git push -u origin $(git rev-parse --abbrev-ref HEAD) "$@" ; }
    gadd()   { [ $# -eq 0 ] && set -- -A  ; git add "$@"               ; }
    gdiff()  { [ $# -eq 0 ] && set master ; git diff origin/"$1"       ; }
    greset() { [ $# -eq 0 ] && set 10     ; git reset --hard HEAD~"$1" ; }
    gbase()  { [ $# -eq 0 ] && set 5      ; git rebase -i HEAD~$1      ; }
    ghclone() { git clone https://github.com/"$1" ; }
    gtmp() { 
        [ $# -eq 0 ] && set "/tmp/$(basename ${PWD})-repo"
        git init --bare "$1" &&
        git init .
        git remote add origin "$1" &&
        git add -A &&
        git commit -m "initial commit" &&
        git push -u origin master
    }
}

wlibc() { 
    set $(strings -a "$1")
    for i in musl glibc llvm ; do
        echo "$@" | grep -oi $i && break
    done | head -n 1 
}

a {..,cd..}='cd ..'
a ...='.. ; ..'
a ....='.. ; ...'

_g() { local a=$1 ; shift ; cd $a/"$@" ; cl ;  }

for i in bin env etc tmp usr var src ; do
    exists ~/$i &&
        a g$(printf %.1s $i)="_g ~/$i"
    a g$(printf %.1s $i | tr [a-z] [A-Z])="_g /$i"
done

a gM='_g /mnt'
case ${SHELL} in
    *ksh|bash)
        g~() { cd ~          ; }
        m~() { mv "$@" ~     ; }
        Y~() { cp "$@" ~     ; }
esac
mT() { mv "$@" /tmp  ; }
YT() { cp "$@" /tmp  ; }

exists ~/var && {
    for i in downloads files images music ; do
        a g$(printf %.1s $i)="_g ~/var/$i"
    done

    a {gvi,gvid}='_g ~/var/videos'
    a gbk='_g ~/var/books'
    a gvt='_g ~/var/tmp'
    a gyt='_g ~/.youtube-dl'

    Yf() { cp "$@" ~/var/files     ; }
    Yd() { cp "$@" ~/var/downloads ; }
    Yi() { cp "$@" ~/var/images    ; }
    Ym() { cp "$@" ~/var/music     ; }
    Yvi(){ cp "$@" ~/var/videos    ; }

    mf() { mv "$@" ~/var/files     ; }
    md() { mv "$@" ~/var/downloads ; }
    mi() { mv "$@" ~/var/images    ; }
    mm() { mv "$@" ~/var/music     ; }
    mvi(){ mv "$@" ~/var/videos    ; }
}
exists ~/usr && {
    a gr='_g ~/usr/repos' 
    a gbkup='_g ~/usr/backup'
    mu() { mv "$@" ~/usr ; }
    mr() { mv "$@" ~/usr/repos ; }
    Yu() { cp "$@" ~/usr ; }
    Yr() { cp "$@" ~/usr/repos ; }
}
exists ~/etc && {
    me() { mv "$@" ~/etc ; }
    Ye() { cp "$@" ~/etc ; }
    a gcf='_g ~/etc/config'

    a {aliases,alaises,aliase}='v ~/etc/aliases'
    a profile='v ~/etc/profile'
    a {bmk,bmks}='v ~/var/files/bookmarks/bookmarks.txt'
    a vssh='v ~/.ssh/config'

    for i in vim ksh xinit ; do
        a ${i}rc="v ~/etc/${i}rc"
    done

    for i in dwm st surf tabbed dmenu ; do
        a ${i}cfg="v ~/etc/suckless/$i/config.h"
        a ${i}c="v ~/etc/suckless/$i/$i.c"
    done
    recomp() { for i ; do
                   ~/bin/recomp ~/etc/suckless/$i
               done ; }
}
exists ~/src && { a gs='_g ~/src'
                  ms() { mv "$@" ~/src  ; }
                  Ys() { cp "$@" ~/src ; } ; }

exists ~/bin && { mb() { mv "$@" ~/bin ; }
                  Yb() { cp "$@" ~/bin ; } ; }

exists ~/tmp && { mt() { mv "$@" ~/tmp ; }
                  Yt() { cp "$@" ~/tmp ; } ; }

exists ~/env && { mn() { mv "$@" ~/env ; }
                  Yn() { cp "$@" ~/env ; }
                  a gn='_g ~/env' ; }

cat ~/.ssh/config 2> /dev/null | grep torrentbox > /dev/null &&
{
    addtorrent() {
        for i ; do
            if [ -f "$i" ] ; then
                scp "$i" torrentbox:~/.torrents/torrents &&
                echossh torrentbox '~/.torrents/queue.txt' '/home/banana/.torrents/torrents'/"${i##*/}" &&
                rm -f "$i"
            else
                echossh torrentbox '~/.torrents/queue.txt' "$i"
            fi
        done
    }
    a checktorrents='ssh torrentbox tail -f /tmp/torrent*.log'
    torrent() {
        aria2c --file-allocation=falloc \
            --check-integrity=true --continue=true \
            --max-concurrent-downloads=20 --seed-time=0 "$@"
    }
}

exists ~/.youtube-dl &&
{
    addyt() { 
        for i ; do
            echo "$i" >> ~/.youtube-dl/video-queue.txt
        done
    }
    addytm() {
        for i ; do
            echo "$i" >> ~/.youtube-dl/music-queue.txt
        done
    }
    checkyt() { tail -f /tmp/ytdl*.log ; }

    ytdlm() { 
        for i ; do
            youtube-dl --geo-bypass --prefer-ffmpeg --extract-audio \
                --audio-quality 0 --audio-format opus "$i"
        done
    }
    ytdl() { 
        for i ; do
            youtube-dl --geo-bypass --prefer-ffmpeg "$i"
        done
    }
}

has pk &&
    gpk() { cd ~/.local/pk/prefix ; cls ; }

exists ~/src/pk &&
{
    # push_ports() { rsync ~/src/pk/ports/ micro:mitchweaverxyz/pk/ports ; }
    vpk() { v ~/src/pk/pk ; }
    repk() { cp -f ~/src/pk/pk ~/.local/bin/pk ; }
    pkbk() { cmd cp -rf ~/.local/pk /tmp/pk ; pack /tmp/pk ; }
}

exists ~/var &&
{
    mvwait() {
        for i ; do
            mv "$i" ~/var/music/waiting_pool
        done
    }
}

randomcat() {
    for i in $(seq 10) ; do
        curl -H 'Accept-Content: application/json' -s -L https://aws.random.cat/meow | \
            jq -r '.[]' | xargs -r -I'{}' curl -s -L {} | feh - && break
    done 2> /dev/null
}

has cover &&
{
    split2flac() {
        if [ "$(find . -maxdepth 1 -iname '*.flac')" ] ; then
            cmd split2flac ./*.flac || return
        elif [ "$(find . -maxdepth 1 -iname '*.wav')" ] ; then
            cmd split2flac ./*.wav || return
        else
            return
        fi
        rm -f *.flac *.wav scans Scans covers Covers *.cue *.log *.txt *.*nfo *.toc *.*rip
        mv -f "`find . -maxdepth 1 ! -path . -type d`"/*/* . && \
            rm -rf "`find . -maxdepth 1 ! -path . -type d`"
        jpg *.png 2> /dev/null
        mv *.jpg cover.jpg
        jpegoptim *.jpg > /dev/null
    }

    fetchcovers() {
        for i in * ; do
            cd "$i" || continue
            a="$(basename "$(echo $PWD | sed -E 's/\/[0-9]+.*//')") - $(echo "$i" | sed -E 's/[0-9]+ - //')"
            echo "$a"
            cover "$a"
            cd ..
        done
    }

    bandlogo() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            echo "$artist"
            band "$artist"
            logo "$artist"
        else
            band "$@" ; logo "$@"
        fi
    }
    cover() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            album=$(basename "$PWD" | sed -E 's/[0-9]+ - //' | sed -E 's/ \(.*//')
            echo "$artist - $album"
            cmd cover "$artist - $album"
        else
            cmd cover "$@"
        fi
    }
    songs() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            album=$(basename "$PWD" | sed -E 's/[0-9]+ - //' | sed -E 's/ \(.*//')
            echo "$artist - $album"
            cmd songs "$artist - $album"
        else
            cmd songs "$@"
        fi
    }
    location() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            echo "$artist"
            cmd location "$artist"
        else
            cmd location "$@"
        fi
    }
    releases() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            echo "$artist"
            cmd releases "$artist"
        else
            cmd releases "$@"
        fi
    }
    genre() {
        if [ $# -eq 0 ] ; then
            artist=$(basename "$(echo $PWD | \
                sed -E 's/\/[0-9]+.*//' | \
                sed -E 's/ \([A-Z]+[a-z]*\)//')")
            echo "$artist"
            cmd genre "$artist"
        else
            cmd genre "$@"
        fi
    }

    fehcover() {
        _PWD=$PWD
        cd /tmp
        cover "$@" && feh ./cover.jpg 2> /dev/null
        [ -f ./cover.jpg ] && rm -f ./cover.jpg
        cd "$_PWD"
    }
    fehlogo() {
        _PWD=$PWD
        cd /tmp
        logo "$@" && feh ./logo.jpg 2> /dev/null
        [ -f ./logo.jpg ] && rm -f ./logo.jpg
        cd "$_PWD"
    }
    backup_music() {
        if [ -d /mnt/hdd/music ] ; then
            rsync /mnt/data/music/ /mnt/hdd/music
        else
            rsync /mnt/data/music/ banana:/mnt/500GB/music
        fi
    }
}

u i j _u _p _h

a save_wall='cp ${HOME}/var/tmp/wall ${HOME}/var/images/wallpapers/unsplash/saved_"$(date)".png'
